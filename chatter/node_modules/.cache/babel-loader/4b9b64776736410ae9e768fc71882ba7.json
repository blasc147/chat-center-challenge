{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\nimport config from '../../../config';\nimport initialMessage from '../../../common/constants/initialCarolMessage';\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: ['websocket', 'polling', 'flashsocket']\n});\nconst initialCarolMessage = {\n  user: 'bot',\n  message: initialMessage,\n  id: Date.now()\n};\nexport default function useChat() {\n  _s();\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const [messages, setMessages] = useState([initialCarolMessage]);\n  const [message, setMessage] = useState('');\n  const [botTyping, setBotTyping] = useState(false);\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to the server');\n    });\n    socket.on('bot-message', botMessage => {\n      console.log('Received bot message:', botMessage);\n      setMessages(prevMessages => [...prevMessages, {\n        user: 'bot',\n        message: botMessage,\n        id: Date.now()\n      }]);\n      setBotTyping(false);\n      playReceive();\n    });\n    socket.on('bot-typing', () => {\n      console.log('Bot is typing');\n      setBotTyping(true);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from the server');\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('bot-message');\n      socket.off('bot-typing');\n      socket.off('disconnect');\n    };\n  }, [playReceive]);\n  const sendMessage = useCallback(() => {\n    if (message.trim()) {\n      const userMessage = {\n        user: 'me',\n        message: message.trim(),\n        id: Date.now()\n      };\n      console.log('Sending user message:', userMessage);\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setMessage('');\n      playSend();\n      socket.emit('user-message', message.trim());\n    }\n  }, [message, playSend]);\n  const onChangeMessage = e => {\n    setMessage(e.target.value);\n  };\n  useEffect(() => {\n    const messageList = document.getElementById('message-list');\n    messageList.scrollTop = messageList.scrollHeight;\n  }, [messages]);\n  return {\n    messages,\n    message,\n    botTyping,\n    sendMessage,\n    onChangeMessage\n  };\n}\n_s(useChat, \"i6ZDxTdGKWc/qGNEr5G8ejphDws=\", false, function () {\n  return [useSound, useSound];\n});","map":{"version":3,"names":["useEffect","useState","useCallback","io","useSound","config","initialMessage","socket","BOT_SERVER_ENDPOINT","transports","initialCarolMessage","user","message","id","Date","now","useChat","_s","playSend","SEND_AUDIO_URL","playReceive","RECEIVE_AUDIO_URL","messages","setMessages","setMessage","botTyping","setBotTyping","on","console","log","botMessage","prevMessages","off","sendMessage","trim","userMessage","emit","onChangeMessage","e","target","value","messageList","document","getElementById","scrollTop","scrollHeight"],"sources":["/home/blas/Music/chatcenter-js-coding-challenge-1/chatter/src/hooks/useChat.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport io from 'socket.io-client'\nimport useSound from 'use-sound'\nimport config from '../../../config'\nimport initialMessage from '../../../common/constants/initialCarolMessage'\n\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: ['websocket', 'polling', 'flashsocket']\n})\n\nconst initialCarolMessage = {\n  user: 'bot',\n  message: initialMessage,\n  id: Date.now()\n}\n\nexport default function useChat() {\n  const [playSend] = useSound(config.SEND_AUDIO_URL)\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL)\n  const [messages, setMessages] = useState([initialCarolMessage])\n  const [message, setMessage] = useState('')\n  const [botTyping, setBotTyping] = useState(false)\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to the server')\n    })\n\n    socket.on('bot-message', (botMessage) => {\n      console.log('Received bot message:', botMessage)\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: 'bot', message: botMessage, id: Date.now() }\n      ])\n      setBotTyping(false)\n      playReceive()\n    })\n\n    socket.on('bot-typing', () => {\n      console.log('Bot is typing')\n      setBotTyping(true)\n    })\n\n    socket.on('disconnect', () => {\n      console.log('Disconnected from the server')\n    })\n\n    return () => {\n      socket.off('connect')\n      socket.off('bot-message')\n      socket.off('bot-typing')\n      socket.off('disconnect')\n    }\n  }, [playReceive])\n\n  const sendMessage = useCallback(() => {\n    if (message.trim()) {\n      const userMessage = {\n        user: 'me',\n        message: message.trim(),\n        id: Date.now()\n      }\n      console.log('Sending user message:', userMessage)\n      setMessages((prevMessages) => [...prevMessages, userMessage])\n      setMessage('')\n      playSend()\n\n      socket.emit('user-message', message.trim())\n    }\n  }, [message, playSend])\n\n  const onChangeMessage = (e) => {\n    setMessage(e.target.value)\n  }\n\n  useEffect(() => {\n    const messageList = document.getElementById('message-list')\n    messageList.scrollTop = messageList.scrollHeight\n  }, [messages])\n\n  return {\n    messages,\n    message,\n    botTyping,\n    sendMessage,\n    onChangeMessage\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}